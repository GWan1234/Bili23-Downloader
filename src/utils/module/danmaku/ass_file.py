class ASS:
    @classmethod
    def make(cls, dialogue_list: list, style: str, info: dict):
        sections = (cls.get_script_info(info), cls.get_styles(style), cls.get_events(dialogue_list))

        return "\n\n".join(sections)

    @classmethod
    def get_script_info(cls, info: dict):
        data = [
            (";", "Script generated by Bili23 Downloader"),
            (";", "https://bili23.scott-sloan.cn"),
            ("ScriptType", "v4.00+"),
            ("PlayResX", info.get("width")),
            ("PlayResY", info.get("height")),
            ("Aspect Ratio", f"{info.get('width')}:{info.get('height')}"),
            ("Collisions", "Normal"),
            ("WrapStyle", "2"),
            ("ScaledBorderAndShadow", "yes"),
        ]

        return cls.format_section("Script Info", data)
    
    @classmethod
    def get_styles(cls, style: str):
        data = [
            ("Format", "Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"),
            ("Style", style)
        ]

        return cls.format_section("V4+ Styles", data)

    @classmethod
    def get_events(cls, dialogue_list: list):
        def get_dialogue_data(start: str, end: str, text: str):
            return f"2,{start},{end},Default,,0,0,0,,{text}"

        data = [
            ("Format", "Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"),
        ]

        dialogues = [("Dialogue", get_dialogue_data(start, end, text)) for (start, end, text) in dialogue_list]

        data.extend(dialogues)
        
        return cls.format_section("Events", data)
    
    @staticmethod
    def format_section(title: str, data: list):
        return f"[{title}]\n" + "\n".join([f"{key}: {value}" if key != ";" else f"; {value}" for (key, value) in data])